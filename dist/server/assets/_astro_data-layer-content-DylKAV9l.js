;!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="bf215abb-012b-400e-8857-00e407337c65",e._sentryDebugIdIdentifier="sentry-dbid-bf215abb-012b-400e-8857-00e407337c65")}catch(e){}}();const _astro_dataLayerContent = [["Map",1,2,7,8,183,184],"meta::meta",["Map",3,4,5,6],"astro-version","5.4.3","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"server\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":\"0.0.0.0\",\"port\":3000,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\",\"entrypoint\":\"astro/assets/endpoint/node\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":\"shiki\",\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"serializeConfig\":false},\"legacy\":{\"collections\":false}}","backend_docs",["Map",9,10,38,39,81,82,129,130],"database-schema",{id:9,data:11,body:16,filePath:17,digest:18,rendered:19,legacyId:37},{title:12,description:13,order:14,updated:15},"Database Schema","Overview of the database structure and schema for the Open Graph Generator",2,["Date","2023-05-22T00:00:00.000Z"],"# Database Schema\n\nThe Open Graph Generator uses SQLite to store information about image generations and track usage.\n\n## Generations Table\n\nThe primary table `generations` stores information about each Open Graph image generation:\n\n| Column        | Type      | Description                                            |\n| ------------- | --------- | ------------------------------------------------------ |\n| ID            | TEXT      | Unique identifier for the generation (UUID)            |\n| Title         | TEXT      | The title used in the Open Graph image                 |\n| Description   | TEXT      | The description used in the Open Graph image           |\n| TargetURL     | TEXT      | The URL the Open Graph image points to                 |\n| ImagePath     | TEXT      | Path to the generated image file                       |\n| HTMLPath      | TEXT      | Path to the generated HTML with meta tags              |\n| CreatedAt     | TIMESTAMP | When the generation was created                        |\n| ClientIP      | TEXT      | IP address of the client that requested the generation |\n| UserAgent     | TEXT      | User agent of the client that requested the generation |\n| Parameters    | TEXT      | JSON string of additional parameters used              |\n| Status        | TEXT      | Status of the generation (pending, completed, failed)  |\n| cleanup_after | TIMESTAMP | When the generated files should be cleaned up          |\n\n## Indexes\n\nThe database has the following indexes for performance:\n\n- `idx_generations_id`: Index on the `ID` column for fast lookups\n- `idx_generations_created_at`: Index on the `CreatedAt` column for sorting by time\n- `idx_generations_cleanup_after`: Index on the `cleanup_after` column for the cleanup job\n\n## Automatic Cleanup\n\nGenerated files and database records are automatically cleaned up after a configurable period (default: 24 hours). The cleanup process:\n\n1. Finds all records where `cleanup_after` is before the current time\n2. Deletes the associated image and HTML files\n3. Removes the database record\n\nThis prevents unlimited storage growth and ensures temporary files are properly managed.","src/content/backend_docs/database-schema.md","77eb65c252816790",{html:20,metadata:21},"<h1 id=\"database-schema\">Database Schema</h1>\n<p>The Open Graph Generator uses SQLite to store information about image generations and track usage.</p>\n<h2 id=\"generations-table\">Generations Table</h2>\n<p>The primary table <code>generations</code> stores information about each Open Graph image generation:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Column</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>ID</td><td>TEXT</td><td>Unique identifier for the generation (UUID)</td></tr><tr><td>Title</td><td>TEXT</td><td>The title used in the Open Graph image</td></tr><tr><td>Description</td><td>TEXT</td><td>The description used in the Open Graph image</td></tr><tr><td>TargetURL</td><td>TEXT</td><td>The URL the Open Graph image points to</td></tr><tr><td>ImagePath</td><td>TEXT</td><td>Path to the generated image file</td></tr><tr><td>HTMLPath</td><td>TEXT</td><td>Path to the generated HTML with meta tags</td></tr><tr><td>CreatedAt</td><td>TIMESTAMP</td><td>When the generation was created</td></tr><tr><td>ClientIP</td><td>TEXT</td><td>IP address of the client that requested the generation</td></tr><tr><td>UserAgent</td><td>TEXT</td><td>User agent of the client that requested the generation</td></tr><tr><td>Parameters</td><td>TEXT</td><td>JSON string of additional parameters used</td></tr><tr><td>Status</td><td>TEXT</td><td>Status of the generation (pending, completed, failed)</td></tr><tr><td>cleanup_after</td><td>TIMESTAMP</td><td>When the generated files should be cleaned up</td></tr></tbody></table>\n<h2 id=\"indexes\">Indexes</h2>\n<p>The database has the following indexes for performance:</p>\n<ul>\n<li><code>idx_generations_id</code>: Index on the <code>ID</code> column for fast lookups</li>\n<li><code>idx_generations_created_at</code>: Index on the <code>CreatedAt</code> column for sorting by time</li>\n<li><code>idx_generations_cleanup_after</code>: Index on the <code>cleanup_after</code> column for the cleanup job</li>\n</ul>\n<h2 id=\"automatic-cleanup\">Automatic Cleanup</h2>\n<p>Generated files and database records are automatically cleaned up after a configurable period (default: 24 hours). The cleanup process:</p>\n<ol>\n<li>Finds all records where <code>cleanup_after</code> is before the current time</li>\n<li>Deletes the associated image and HTML files</li>\n<li>Removes the database record</li>\n</ol>\n<p>This prevents unlimited storage growth and ensures temporary files are properly managed.</p>",{headings:22,localImagePaths:34,remoteImagePaths:35,frontmatter:11,imagePaths:36},[23,25,28,31],{depth:24,slug:9,text:12},1,{depth:14,slug:26,text:27},"generations-table","Generations Table",{depth:14,slug:29,text:30},"indexes","Indexes",{depth:14,slug:32,text:33},"automatic-cleanup","Automatic Cleanup",[],[],[],"database-schema.md","admin-access",{id:38,data:40,body:44,filePath:45,digest:46,rendered:47,legacyId:80},{title:41,description:42,order:24,updated:43},"Admin Access","Documentation for administrative features and access control",["Date","2023-05-20T00:00:00.000Z"],"# Admin Access\n\nDocumentation for administrative features and access control in the Open Graph Generator.\n\n## Configuration\n\nAdmin access is configured through environment variables:\n\n**In the backend:**\n\n- Set `ADMIN_TOKEN` in the `.env` file to a secure token value\n- Example: `ADMIN_TOKEN=a-secure-random-string`\n\n**In the frontend:**\n\n- Set `PUBLIC_ADMIN_AUTH_REQUIRED=true` in the `.env` file to enable admin authentication\n\nIf `ADMIN_TOKEN` is not set in the backend, admin authentication will be disabled and all users will have access to the history API.\n\n## Accessing Admin Features\n\nThe history page at `/history` is restricted to administrators only when admin authentication is enabled.\n\nWhen visiting the page, users will be presented with a login form requesting an admin token. This token must match the value of `ADMIN_TOKEN` set in the backend environment.\n\n### Admin Status Indicator\n\nWhen logged in as an admin, you'll see an \"Admin\" badge in the navigation bar, along with a logout button that allows you to end your admin session.\n\n## API Authentication\n\nBackend API endpoints for administrative features use Bearer token authentication. The token must be included in the `Authorization` header of the request:\n\n```\nAuthorization: Bearer your-admin-token\n```\n\n### Protected Endpoints\n\nThe following API endpoints require admin authentication:\n\n- `GET /api/history` - List of generation records\n- `GET /api/history/:id` - Details of a specific generation record\n\n### Verifying Admin Access\n\nTo verify that an admin token is valid, you can make a request to:\n\n```\nPOST /api/admin/verify\n```\n\nWith the header:\n\n```\nAuthorization: Bearer your-admin-token\n```\n\n## Security Considerations\n\n- Use a strong, random token for the `ADMIN_TOKEN` value\n- In production, always use HTTPS to protect the admin token during transmission\n- Consider implementing rate limiting for admin login attempts to prevent brute force attacks\n- Regularly rotate the admin token for enhanced security\n\n## Implementation Details\n\nThe admin authentication system is implemented through:\n\n1. A middleware in the backend that validates the admin token for protected endpoints\n2. A client-side validation in the frontend that stores the token in a cookie after verification\n3. All API requests from the admin interface include the token in the `Authorization` header","src/content/backend_docs/admin-access.md","60e25af70f30d4be",{html:48,metadata:49},"<h1 id=\"admin-access\">Admin Access</h1>\n<p>Documentation for administrative features and access control in the Open Graph Generator.</p>\n<h2 id=\"configuration\">Configuration</h2>\n<p>Admin access is configured through environment variables:</p>\n<p><strong>In the backend:</strong></p>\n<ul>\n<li>Set <code>ADMIN_TOKEN</code> in the <code>.env</code> file to a secure token value</li>\n<li>Example: <code>ADMIN_TOKEN=a-secure-random-string</code></li>\n</ul>\n<p><strong>In the frontend:</strong></p>\n<ul>\n<li>Set <code>PUBLIC_ADMIN_AUTH_REQUIRED=true</code> in the <code>.env</code> file to enable admin authentication</li>\n</ul>\n<p>If <code>ADMIN_TOKEN</code> is not set in the backend, admin authentication will be disabled and all users will have access to the history API.</p>\n<h2 id=\"accessing-admin-features\">Accessing Admin Features</h2>\n<p>The history page at <code>/history</code> is restricted to administrators only when admin authentication is enabled.</p>\n<p>When visiting the page, users will be presented with a login form requesting an admin token. This token must match the value of <code>ADMIN_TOKEN</code> set in the backend environment.</p>\n<h3 id=\"admin-status-indicator\">Admin Status Indicator</h3>\n<p>When logged in as an admin, you’ll see an “Admin” badge in the navigation bar, along with a logout button that allows you to end your admin session.</p>\n<h2 id=\"api-authentication\">API Authentication</h2>\n<p>Backend API endpoints for administrative features use Bearer token authentication. The token must be included in the <code>Authorization</code> header of the request:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Authorization: Bearer your-admin-token</span></span></code></pre>\n<h3 id=\"protected-endpoints\">Protected Endpoints</h3>\n<p>The following API endpoints require admin authentication:</p>\n<ul>\n<li><code>GET /api/history</code> - List of generation records</li>\n<li><code>GET /api/history/:id</code> - Details of a specific generation record</li>\n</ul>\n<h3 id=\"verifying-admin-access\">Verifying Admin Access</h3>\n<p>To verify that an admin token is valid, you can make a request to:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>POST /api/admin/verify</span></span></code></pre>\n<p>With the header:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>Authorization: Bearer your-admin-token</span></span></code></pre>\n<h2 id=\"security-considerations\">Security Considerations</h2>\n<ul>\n<li>Use a strong, random token for the <code>ADMIN_TOKEN</code> value</li>\n<li>In production, always use HTTPS to protect the admin token during transmission</li>\n<li>Consider implementing rate limiting for admin login attempts to prevent brute force attacks</li>\n<li>Regularly rotate the admin token for enhanced security</li>\n</ul>\n<h2 id=\"implementation-details\">Implementation Details</h2>\n<p>The admin authentication system is implemented through:</p>\n<ol>\n<li>A middleware in the backend that validates the admin token for protected endpoints</li>\n<li>A client-side validation in the frontend that stores the token in a cookie after verification</li>\n<li>All API requests from the admin interface include the token in the <code>Authorization</code> header</li>\n</ol>",{headings:50,localImagePaths:77,remoteImagePaths:78,frontmatter:40,imagePaths:79},[51,52,55,58,62,65,68,71,74],{depth:24,slug:38,text:41},{depth:14,slug:53,text:54},"configuration","Configuration",{depth:14,slug:56,text:57},"accessing-admin-features","Accessing Admin Features",{depth:59,slug:60,text:61},3,"admin-status-indicator","Admin Status Indicator",{depth:14,slug:63,text:64},"api-authentication","API Authentication",{depth:59,slug:66,text:67},"protected-endpoints","Protected Endpoints",{depth:59,slug:69,text:70},"verifying-admin-access","Verifying Admin Access",{depth:14,slug:72,text:73},"security-considerations","Security Considerations",{depth:14,slug:75,text:76},"implementation-details","Implementation Details",[],[],[],"admin-access.md","docker-setup",{id:81,data:83,body:87,filePath:88,digest:89,rendered:90,legacyId:128},{title:84,description:85,order:59,updated:86},"Docker Setup","How to run the Open Graph Generator using Docker for development and production",["Date","2023-05-25T00:00:00.000Z"],"# Docker Setup\n\nThe Open Graph Generator provides Docker configurations for both development and production environments, making it easy to set up and deploy the application.\n\n## Development Environment\n\nThe development environment is configured using `docker-compose.yml` and includes hot-reloading for both frontend and backend services.\n\n### Starting the Development Environment\n\n```bash\ndocker compose up\n```\n\nThis will start:\n\n- Frontend service on port 3000\n- Backend service on port 8888\n\nThe development Docker setup includes volume mounts that allow you to modify code on your host machine and see the changes reflected immediately.\n\n### Environment Variables\n\nKey environment variables for the development environment:\n\n**Frontend:**\n\n- `BACKEND_URL=http://backend:8888` - Internal Docker network URL for backend\n- `NODE_ENV=development` - Sets Node.js to development mode\n- `SVELTE_FORCE_COMPILE=true` - Ensures Svelte components are recompiled\n- `ASTRO_TELEMETRY_DISABLED=1` - Disables Astro telemetry\n\n**Backend:**\n\n- `PORT=8888` - Port for the backend server\n- `BASE_URL=http://backend:8888` - Base URL for generated asset links\n- `ENABLE_CORS=true` - Enables Cross-Origin Resource Sharing\n- `OUTPUT_DIR=/app/outputs` - Directory for generated assets\n\n## Production Environment\n\nThe production environment is configured using `docker-compose.production.yml` and includes optimized builds for better performance.\n\n### Starting the Production Environment\n\n```bash\ndocker compose -f docker-compose.production.yml up -d\n```\n\nThis will start:\n\n- Optimized frontend service on port 3000\n- Optimized backend service on port 8080 (note the different port from development)\n\n### Production Features\n\n- **Optimized Builds**: Both services use multi-stage builds to create smaller, more efficient containers\n- **Health Checks**: Both services include health checks for monitoring container health\n- **Persistent Storage**: Production setup includes a named volume for persistent storage\n- **Resource Constraints**: You can set resource limits for containers\n\n## Accessing the Services\n\n- Frontend: `http://localhost:3000`\n- Backend API:\n  - Development: `http://localhost:8888`\n  - Production: `http://localhost:8080`\n\n## Docker Volumes\n\nThe Docker setup includes several volumes:\n\n- `frontend_node_modules`: For caching Node.js modules\n- `frontend_pnpm_store`: For caching pnpm packages\n- `outputs`: Shared volume for generated images and HTML files\n- `backend_data`: (Production only) Persistent storage for backend data\n\n## Debugging Docker Setup\n\nIf you encounter issues with the Docker setup:\n\n1. Check container logs:\n\n   ```bash\n   docker compose logs frontend\n   docker compose logs backend\n   ```\n\n2. Verify network connectivity between containers:\n\n   ```bash\n   docker compose exec frontend ping backend\n   ```\n\n3. Check running containers:\n   ```bash\n   docker compose ps\n   ```\n\n## Customizing Docker Setup\n\nYou can create a `.env` file in the root directory to override any environment variables defined in the Docker Compose files.\n\nExample `.env` file:\n\n```\nPORT=9999\nBACKEND_URL=http://backend:9999\n```","src/content/backend_docs/docker-setup.md","552b512b342d420f",{html:91,metadata:92},"<h1 id=\"docker-setup\">Docker Setup</h1>\n<p>The Open Graph Generator provides Docker configurations for both development and production environments, making it easy to set up and deploy the application.</p>\n<h2 id=\"development-environment\">Development Environment</h2>\n<p>The development environment is configured using <code>docker-compose.yml</code> and includes hot-reloading for both frontend and backend services.</p>\n<h3 id=\"starting-the-development-environment\">Starting the Development Environment</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#9ECBFF\"> up</span></span></code></pre>\n<p>This will start:</p>\n<ul>\n<li>Frontend service on port 3000</li>\n<li>Backend service on port 8888</li>\n</ul>\n<p>The development Docker setup includes volume mounts that allow you to modify code on your host machine and see the changes reflected immediately.</p>\n<h3 id=\"environment-variables\">Environment Variables</h3>\n<p>Key environment variables for the development environment:</p>\n<p><strong>Frontend:</strong></p>\n<ul>\n<li><code>BACKEND_URL=http://backend:8888</code> - Internal Docker network URL for backend</li>\n<li><code>NODE_ENV=development</code> - Sets Node.js to development mode</li>\n<li><code>SVELTE_FORCE_COMPILE=true</code> - Ensures Svelte components are recompiled</li>\n<li><code>ASTRO_TELEMETRY_DISABLED=1</code> - Disables Astro telemetry</li>\n</ul>\n<p><strong>Backend:</strong></p>\n<ul>\n<li><code>PORT=8888</code> - Port for the backend server</li>\n<li><code>BASE_URL=http://backend:8888</code> - Base URL for generated asset links</li>\n<li><code>ENABLE_CORS=true</code> - Enables Cross-Origin Resource Sharing</li>\n<li><code>OUTPUT_DIR=/app/outputs</code> - Directory for generated assets</li>\n</ul>\n<h2 id=\"production-environment\">Production Environment</h2>\n<p>The production environment is configured using <code>docker-compose.production.yml</code> and includes optimized builds for better performance.</p>\n<h3 id=\"starting-the-production-environment\">Starting the Production Environment</h3>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#79B8FF\"> -f</span><span style=\"color:#9ECBFF\"> docker-compose.production.yml</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#79B8FF\"> -d</span></span></code></pre>\n<p>This will start:</p>\n<ul>\n<li>Optimized frontend service on port 3000</li>\n<li>Optimized backend service on port 8080 (note the different port from development)</li>\n</ul>\n<h3 id=\"production-features\">Production Features</h3>\n<ul>\n<li><strong>Optimized Builds</strong>: Both services use multi-stage builds to create smaller, more efficient containers</li>\n<li><strong>Health Checks</strong>: Both services include health checks for monitoring container health</li>\n<li><strong>Persistent Storage</strong>: Production setup includes a named volume for persistent storage</li>\n<li><strong>Resource Constraints</strong>: You can set resource limits for containers</li>\n</ul>\n<h2 id=\"accessing-the-services\">Accessing the Services</h2>\n<ul>\n<li>Frontend: <code>http://localhost:3000</code></li>\n<li>Backend API:\n<ul>\n<li>Development: <code>http://localhost:8888</code></li>\n<li>Production: <code>http://localhost:8080</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"docker-volumes\">Docker Volumes</h2>\n<p>The Docker setup includes several volumes:</p>\n<ul>\n<li><code>frontend_node_modules</code>: For caching Node.js modules</li>\n<li><code>frontend_pnpm_store</code>: For caching pnpm packages</li>\n<li><code>outputs</code>: Shared volume for generated images and HTML files</li>\n<li><code>backend_data</code>: (Production only) Persistent storage for backend data</li>\n</ul>\n<h2 id=\"debugging-docker-setup\">Debugging Docker Setup</h2>\n<p>If you encounter issues with the Docker setup:</p>\n<ol>\n<li>\n<p>Check container logs:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#9ECBFF\"> logs</span><span style=\"color:#9ECBFF\"> frontend</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#9ECBFF\"> logs</span><span style=\"color:#9ECBFF\"> backend</span></span></code></pre>\n</li>\n<li>\n<p>Verify network connectivity between containers:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#9ECBFF\"> exec</span><span style=\"color:#9ECBFF\"> frontend</span><span style=\"color:#9ECBFF\"> ping</span><span style=\"color:#9ECBFF\"> backend</span></span></code></pre>\n</li>\n<li>\n<p>Check running containers:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#9ECBFF\"> ps</span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"customizing-docker-setup\">Customizing Docker Setup</h2>\n<p>You can create a <code>.env</code> file in the root directory to override any environment variables defined in the Docker Compose files.</p>\n<p>Example <code>.env</code> file:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>PORT=9999</span></span>\n<span class=\"line\"><span>BACKEND_URL=http://backend:9999</span></span></code></pre>",{headings:93,localImagePaths:125,remoteImagePaths:126,frontmatter:83,imagePaths:127},[94,95,98,101,104,107,110,113,116,119,122],{depth:24,slug:81,text:84},{depth:14,slug:96,text:97},"development-environment","Development Environment",{depth:59,slug:99,text:100},"starting-the-development-environment","Starting the Development Environment",{depth:59,slug:102,text:103},"environment-variables","Environment Variables",{depth:14,slug:105,text:106},"production-environment","Production Environment",{depth:59,slug:108,text:109},"starting-the-production-environment","Starting the Production Environment",{depth:59,slug:111,text:112},"production-features","Production Features",{depth:14,slug:114,text:115},"accessing-the-services","Accessing the Services",{depth:14,slug:117,text:118},"docker-volumes","Docker Volumes",{depth:14,slug:120,text:121},"debugging-docker-setup","Debugging Docker Setup",{depth:14,slug:123,text:124},"customizing-docker-setup","Customizing Docker Setup",[],[],[],"docker-setup.md","deployment",{id:129,data:131,body:136,filePath:137,digest:138,rendered:139,legacyId:182},{title:132,description:133,order:134,updated:135},"Deployment Guide","How to deploy the Open Graph Generator to production",4,["Date","2023-05-30T00:00:00.000Z"],"# Deployment Guide\n\nThis guide explains how to deploy the Open Graph Generator to production environments.\n\n## Deployment Options\n\nThe Open Graph Generator supports several deployment options:\n\n1. **Docker-based deployment**: Using Docker Compose for containerized deployment\n2. **Manual deployment**: Building and running the services directly on a server\n3. **Cloud deployment**: Using cloud services like AWS, GCP, or Azure\n\n## Docker-based Deployment\n\nThe simplest deployment method is using Docker Compose with the production configuration.\n\n### Prerequisites\n\n- Docker and Docker Compose installed on the server\n- Git for cloning the repository\n- A domain name (optional, but recommended)\n- SSL certificate for HTTPS (optional, but recommended)\n\n### Deployment Steps\n\n1. Clone the repository on your server:\n\n   ```bash\n   git clone https://github.com/yourusername/ogdrip.git\n   cd ogdrip\n   ```\n\n2. Create a `.env` file for production:\n\n   ```bash\n   cp frontend/.env.example frontend/.env\n   ```\n\n3. Edit the `.env` file with your production settings:\n\n   ```\n   BACKEND_URL=https://your-domain.com\n   PUBLIC_BACKEND_URL=https://your-domain.com\n   PUBLIC_ADMIN_AUTH_REQUIRED=true\n   ```\n\n4. Set the backend environment variables by creating a `.env` file in the root directory:\n\n   ```\n   ADMIN_TOKEN=your-secure-admin-token\n   BASE_URL=https://your-domain.com\n   ```\n\n5. Deploy the application using Docker Compose:\n\n   ```bash\n   docker compose -f docker-compose.production.yml up -d\n   ```\n\n6. Configure a reverse proxy (like Nginx or Traefik) to handle HTTPS and route traffic to the appropriate container.\n\n## Manual Deployment\n\nFor servers without Docker, you can deploy the services manually.\n\n### Backend Deployment\n\n1. Install Go on your server (version 1.19 or higher)\n2. Clone the repository\n3. Navigate to the backend directory:\n   ```bash\n   cd backend\n   ```\n4. Build the backend:\n   ```bash\n   go build -o ogdrip-backend .\n   ```\n5. Run the backend:\n   ```bash\n   ./ogdrip-backend\n   ```\n\n### Frontend Deployment\n\n1. Install Node.js (version 18 or higher) and pnpm\n2. Navigate to the frontend directory:\n   ```bash\n   cd frontend\n   ```\n3. Install dependencies:\n   ```bash\n   pnpm install\n   ```\n4. Build the frontend:\n   ```bash\n   pnpm run build\n   ```\n5. Run the production server:\n   ```bash\n   node dist/server/entry.mjs\n   ```\n\n## Environment Variables\n\n### Critical Environment Variables\n\n| Variable                     | Service  | Description                              |\n| ---------------------------- | -------- | ---------------------------------------- |\n| `BACKEND_URL`                | Frontend | URL to the backend API (internal)        |\n| `PUBLIC_BACKEND_URL`         | Frontend | URL to the backend API (public-facing)   |\n| `PUBLIC_ADMIN_AUTH_REQUIRED` | Frontend | Whether admin authentication is required |\n| `ADMIN_TOKEN`                | Backend  | Token for admin authentication           |\n| `BASE_URL`                   | Backend  | Base URL for generated asset links       |\n\n### Optional Environment Variables\n\n| Variable           | Service  | Description                                                         |\n| ------------------ | -------- | ------------------------------------------------------------------- |\n| `PORT`             | Both     | Port for the service (default: 3000 for frontend, 8080 for backend) |\n| `NODE_ENV`         | Frontend | Node.js environment                                                 |\n| `SENTRY_DSN`       | Both     | Sentry DSN for error tracking                                       |\n| `CLEANUP_INTERVAL` | Backend  | Interval for cleaning up old files (default: 24h)                   |\n\n## Health Monitoring\n\nThe application provides health check endpoints:\n\n- Frontend: `/health`\n- Backend: `/api/health`\n\nYou can use these with monitoring tools to check the health of your deployment.\n\n## Backup and Maintenance\n\n1. **Database Backups**: The SQLite database is stored at `/app/outputs/og-generator.db`. Back up this file regularly.\n\n2. **Generated Files**: All generated files are stored in the `/app/outputs` directory. Ensure you have enough disk space.\n\n3. **Updates**: To update the application:\n   ```bash\n   git pull\n   docker compose -f docker-compose.production.yml up -d --build\n   ```","src/content/backend_docs/deployment.md","43f631ba990f7717",{html:140,metadata:141},"<h1 id=\"deployment-guide\">Deployment Guide</h1>\n<p>This guide explains how to deploy the Open Graph Generator to production environments.</p>\n<h2 id=\"deployment-options\">Deployment Options</h2>\n<p>The Open Graph Generator supports several deployment options:</p>\n<ol>\n<li><strong>Docker-based deployment</strong>: Using Docker Compose for containerized deployment</li>\n<li><strong>Manual deployment</strong>: Building and running the services directly on a server</li>\n<li><strong>Cloud deployment</strong>: Using cloud services like AWS, GCP, or Azure</li>\n</ol>\n<h2 id=\"docker-based-deployment\">Docker-based Deployment</h2>\n<p>The simplest deployment method is using Docker Compose with the production configuration.</p>\n<h3 id=\"prerequisites\">Prerequisites</h3>\n<ul>\n<li>Docker and Docker Compose installed on the server</li>\n<li>Git for cloning the repository</li>\n<li>A domain name (optional, but recommended)</li>\n<li>SSL certificate for HTTPS (optional, but recommended)</li>\n</ul>\n<h3 id=\"deployment-steps\">Deployment Steps</h3>\n<ol>\n<li>\n<p>Clone the repository on your server:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> clone</span><span style=\"color:#9ECBFF\"> https://github.com/yourusername/ogdrip.git</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> ogdrip</span></span></code></pre>\n</li>\n<li>\n<p>Create a <code>.env</code> file for production:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">cp</span><span style=\"color:#9ECBFF\"> frontend/.env.example</span><span style=\"color:#9ECBFF\"> frontend/.env</span></span></code></pre>\n</li>\n<li>\n<p>Edit the <code>.env</code> file with your production settings:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>BACKEND_URL=https://your-domain.com</span></span>\n<span class=\"line\"><span>PUBLIC_BACKEND_URL=https://your-domain.com</span></span>\n<span class=\"line\"><span>PUBLIC_ADMIN_AUTH_REQUIRED=true</span></span></code></pre>\n</li>\n<li>\n<p>Set the backend environment variables by creating a <code>.env</code> file in the root directory:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>ADMIN_TOKEN=your-secure-admin-token</span></span>\n<span class=\"line\"><span>BASE_URL=https://your-domain.com</span></span></code></pre>\n</li>\n<li>\n<p>Deploy the application using Docker Compose:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#79B8FF\"> -f</span><span style=\"color:#9ECBFF\"> docker-compose.production.yml</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#79B8FF\"> -d</span></span></code></pre>\n</li>\n<li>\n<p>Configure a reverse proxy (like Nginx or Traefik) to handle HTTPS and route traffic to the appropriate container.</p>\n</li>\n</ol>\n<h2 id=\"manual-deployment\">Manual Deployment</h2>\n<p>For servers without Docker, you can deploy the services manually.</p>\n<h3 id=\"backend-deployment\">Backend Deployment</h3>\n<ol>\n<li>Install Go on your server (version 1.19 or higher)</li>\n<li>Clone the repository</li>\n<li>Navigate to the backend directory:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> backend</span></span></code></pre>\n</li>\n<li>Build the backend:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">go</span><span style=\"color:#9ECBFF\"> build</span><span style=\"color:#79B8FF\"> -o</span><span style=\"color:#9ECBFF\"> ogdrip-backend</span><span style=\"color:#9ECBFF\"> .</span></span></code></pre>\n</li>\n<li>Run the backend:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">./ogdrip-backend</span></span></code></pre>\n</li>\n</ol>\n<h3 id=\"frontend-deployment\">Frontend Deployment</h3>\n<ol>\n<li>Install Node.js (version 18 or higher) and pnpm</li>\n<li>Navigate to the frontend directory:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#79B8FF\">cd</span><span style=\"color:#9ECBFF\"> frontend</span></span></code></pre>\n</li>\n<li>Install dependencies:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pnpm</span><span style=\"color:#9ECBFF\"> install</span></span></code></pre>\n</li>\n<li>Build the frontend:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">pnpm</span><span style=\"color:#9ECBFF\"> run</span><span style=\"color:#9ECBFF\"> build</span></span></code></pre>\n</li>\n<li>Run the production server:\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">node</span><span style=\"color:#9ECBFF\"> dist/server/entry.mjs</span></span></code></pre>\n</li>\n</ol>\n<h2 id=\"environment-variables\">Environment Variables</h2>\n<h3 id=\"critical-environment-variables\">Critical Environment Variables</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Variable</th><th>Service</th><th>Description</th></tr></thead><tbody><tr><td><code>BACKEND_URL</code></td><td>Frontend</td><td>URL to the backend API (internal)</td></tr><tr><td><code>PUBLIC_BACKEND_URL</code></td><td>Frontend</td><td>URL to the backend API (public-facing)</td></tr><tr><td><code>PUBLIC_ADMIN_AUTH_REQUIRED</code></td><td>Frontend</td><td>Whether admin authentication is required</td></tr><tr><td><code>ADMIN_TOKEN</code></td><td>Backend</td><td>Token for admin authentication</td></tr><tr><td><code>BASE_URL</code></td><td>Backend</td><td>Base URL for generated asset links</td></tr></tbody></table>\n<h3 id=\"optional-environment-variables\">Optional Environment Variables</h3>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<table><thead><tr><th>Variable</th><th>Service</th><th>Description</th></tr></thead><tbody><tr><td><code>PORT</code></td><td>Both</td><td>Port for the service (default: 3000 for frontend, 8080 for backend)</td></tr><tr><td><code>NODE_ENV</code></td><td>Frontend</td><td>Node.js environment</td></tr><tr><td><code>SENTRY_DSN</code></td><td>Both</td><td>Sentry DSN for error tracking</td></tr><tr><td><code>CLEANUP_INTERVAL</code></td><td>Backend</td><td>Interval for cleaning up old files (default: 24h)</td></tr></tbody></table>\n<h2 id=\"health-monitoring\">Health Monitoring</h2>\n<p>The application provides health check endpoints:</p>\n<ul>\n<li>Frontend: <code>/health</code></li>\n<li>Backend: <code>/api/health</code></li>\n</ul>\n<p>You can use these with monitoring tools to check the health of your deployment.</p>\n<h2 id=\"backup-and-maintenance\">Backup and Maintenance</h2>\n<ol>\n<li>\n<p><strong>Database Backups</strong>: The SQLite database is stored at <code>/app/outputs/og-generator.db</code>. Back up this file regularly.</p>\n</li>\n<li>\n<p><strong>Generated Files</strong>: All generated files are stored in the <code>/app/outputs</code> directory. Ensure you have enough disk space.</p>\n</li>\n<li>\n<p><strong>Updates</strong>: To update the application:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"bash\"><code><span class=\"line\"><span style=\"color:#B392F0\">git</span><span style=\"color:#9ECBFF\"> pull</span></span>\n<span class=\"line\"><span style=\"color:#B392F0\">docker</span><span style=\"color:#9ECBFF\"> compose</span><span style=\"color:#79B8FF\"> -f</span><span style=\"color:#9ECBFF\"> docker-compose.production.yml</span><span style=\"color:#9ECBFF\"> up</span><span style=\"color:#79B8FF\"> -d</span><span style=\"color:#79B8FF\"> --build</span></span></code></pre>\n</li>\n</ol>",{headings:142,localImagePaths:179,remoteImagePaths:180,frontmatter:131,imagePaths:181},[143,145,148,151,154,157,160,163,166,167,170,173,176],{depth:24,slug:144,text:132},"deployment-guide",{depth:14,slug:146,text:147},"deployment-options","Deployment Options",{depth:14,slug:149,text:150},"docker-based-deployment","Docker-based Deployment",{depth:59,slug:152,text:153},"prerequisites","Prerequisites",{depth:59,slug:155,text:156},"deployment-steps","Deployment Steps",{depth:14,slug:158,text:159},"manual-deployment","Manual Deployment",{depth:59,slug:161,text:162},"backend-deployment","Backend Deployment",{depth:59,slug:164,text:165},"frontend-deployment","Frontend Deployment",{depth:14,slug:102,text:103},{depth:59,slug:168,text:169},"critical-environment-variables","Critical Environment Variables",{depth:59,slug:171,text:172},"optional-environment-variables","Optional Environment Variables",{depth:14,slug:174,text:175},"health-monitoring","Health Monitoring",{depth:14,slug:177,text:178},"backup-and-maintenance","Backup and Maintenance",[],[],[],"deployment.md","frontend_docs",["Map",185,186,215,216],"api-reference",{id:185,data:187,body:191,filePath:192,digest:193,rendered:194,legacyId:214},{title:188,description:189,order:14,updated:190},"API Reference","Reference documentation for the Open Graph Generator API",["Date","2023-05-15T00:00:00.000Z"],"# API Reference\n\nThe Open Graph Generator provides a REST API for programmatic access. Here are the available endpoints:\n\n## Generate Open Graph Assets\n\n```\nPOST /api/generate\nContent-Type: application/json\n\n{\n  \"title\": \"Your Page Title\",\n  \"description\": \"Your page description\",\n  \"target_url\": \"https://example.com\",\n  \"og_type\": \"website\",\n  \"site_name\": \"Your Site Name\",\n  \"image_width\": 1200,\n  \"image_height\": 630\n}\n```\n\n### Response\n\nA successful response will include URLs to the generated assets:\n\n```json\n{\n  \"success\": true,\n  \"message\": \"Open Graph assets generated successfully\",\n  \"image_url\": \"https://example.com/og-images/1234-5678.png\",\n  \"html_url\": \"https://example.com/og-meta/1234-5678.html\",\n  \"zip_url\": \"https://example.com/og-downloads/1234-5678.zip\"\n}\n```\n\n## Download Generated Assets\n\n```\nGET /api/download/:generationId\n```\n\nThis endpoint returns a ZIP file containing the image, HTML file with meta tags, and a preview of how it looks on social media.\n\n## Health Check\n\n```\nGET /api/health\n```\n\nReturns the status of the API:\n\n```json\n{\n  \"status\": \"ok\",\n  \"message\": \"Open Graph Generator API is running\"\n}\n```","src/content/frontend_docs/api-reference.md","0f08d1f6f674ab26",{html:195,metadata:196},"<h1 id=\"api-reference\">API Reference</h1>\n<p>The Open Graph Generator provides a REST API for programmatic access. Here are the available endpoints:</p>\n<h2 id=\"generate-open-graph-assets\">Generate Open Graph Assets</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>POST /api/generate</span></span>\n<span class=\"line\"><span>Content-Type: application/json</span></span>\n<span class=\"line\"><span></span></span>\n<span class=\"line\"><span>{</span></span>\n<span class=\"line\"><span>  \"title\": \"Your Page Title\",</span></span>\n<span class=\"line\"><span>  \"description\": \"Your page description\",</span></span>\n<span class=\"line\"><span>  \"target_url\": \"https://example.com\",</span></span>\n<span class=\"line\"><span>  \"og_type\": \"website\",</span></span>\n<span class=\"line\"><span>  \"site_name\": \"Your Site Name\",</span></span>\n<span class=\"line\"><span>  \"image_width\": 1200,</span></span>\n<span class=\"line\"><span>  \"image_height\": 630</span></span>\n<span class=\"line\"><span>}</span></span></code></pre>\n<h3 id=\"response\">Response</h3>\n<p>A successful response will include URLs to the generated assets:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"success\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#79B8FF\">true</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"message\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"Open Graph assets generated successfully\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"image_url\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"https://example.com/og-images/1234-5678.png\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"html_url\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"https://example.com/og-meta/1234-5678.html\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"zip_url\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"https://example.com/og-downloads/1234-5678.zip\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>\n<h2 id=\"download-generated-assets\">Download Generated Assets</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>GET /api/download/:generationId</span></span></code></pre>\n<p>This endpoint returns a ZIP file containing the image, HTML file with meta tags, and a preview of how it looks on social media.</p>\n<h2 id=\"health-check\">Health Check</h2>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"plaintext\"><code><span class=\"line\"><span>GET /api/health</span></span></code></pre>\n<p>Returns the status of the API:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"json\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">{</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"status\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"ok\"</span><span style=\"color:#E1E4E8\">,</span></span>\n<span class=\"line\"><span style=\"color:#79B8FF\">  \"message\"</span><span style=\"color:#E1E4E8\">: </span><span style=\"color:#9ECBFF\">\"Open Graph Generator API is running\"</span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">}</span></span></code></pre>",{headings:197,localImagePaths:211,remoteImagePaths:212,frontmatter:187,imagePaths:213},[198,199,202,205,208],{depth:24,slug:185,text:188},{depth:14,slug:200,text:201},"generate-open-graph-assets","Generate Open Graph Assets",{depth:59,slug:203,text:204},"response","Response",{depth:14,slug:206,text:207},"download-generated-assets","Download Generated Assets",{depth:14,slug:209,text:210},"health-check","Health Check",[],[],[],"api-reference.md","getting-started",{id:215,data:217,body:221,filePath:222,digest:223,rendered:224,legacyId:241},{title:218,description:219,order:24,updated:220},"Getting Started","Learn how to use the Open Graph Generator for your website",["Date","2023-05-15T00:00:00.000Z"],"# Getting Started\n\nThe Open Graph Generator helps you create beautiful images and meta tags for social media sharing. Follow these steps to get started:\n\n1. Enter your page title and description\n2. Provide the URL you want to promote\n3. Customize the appearance (optional)\n4. Generate your Open Graph assets\n5. Download and implement them on your website\n\n## Generating Open Graph Images\n\nOpen Graph images are shown when your content is shared on social media platforms like Facebook, Twitter, and LinkedIn. Here's how to create effective images:\n\n### Best Practices:\n\n- Use a clear, concise title that accurately describes your content\n- Keep descriptions informative but brief (under 200 characters)\n- Use high-quality images when possible\n- Follow the recommended dimensions for each platform\n\n## Using Meta Tags\n\nMeta tags tell social platforms how to display your content. After generating your Open Graph assets, you'll need to add these tags to the `<head>` section of your HTML:\n\n```html\n<meta property=\"og:title\" content=\"Your Title\" />\n<meta property=\"og:description\" content=\"Your Description\" />\n<meta property=\"og:image\" content=\"https://example.com/your-image.jpg\" />\n<meta property=\"og:url\" content=\"https://example.com/your-page\" />\n<meta property=\"og:type\" content=\"website\" />\n```\n\nFor Twitter, you might also want to include Twitter Card tags:\n\n```html\n<meta name=\"twitter:card\" content=\"summary_large_image\" />\n<meta name=\"twitter:title\" content=\"Your Title\" />\n<meta name=\"twitter:description\" content=\"Your Description\" />\n<meta name=\"twitter:image\" content=\"https://example.com/your-image.jpg\" />\n```","src/content/frontend_docs/getting-started.md","746d798ef9bdb6a7",{html:225,metadata:226},"<h1 id=\"getting-started\">Getting Started</h1>\n<p>The Open Graph Generator helps you create beautiful images and meta tags for social media sharing. Follow these steps to get started:</p>\n<ol>\n<li>Enter your page title and description</li>\n<li>Provide the URL you want to promote</li>\n<li>Customize the appearance (optional)</li>\n<li>Generate your Open Graph assets</li>\n<li>Download and implement them on your website</li>\n</ol>\n<h2 id=\"generating-open-graph-images\">Generating Open Graph Images</h2>\n<p>Open Graph images are shown when your content is shared on social media platforms like Facebook, Twitter, and LinkedIn. Here’s how to create effective images:</p>\n<h3 id=\"best-practices\">Best Practices:</h3>\n<ul>\n<li>Use a clear, concise title that accurately describes your content</li>\n<li>Keep descriptions informative but brief (under 200 characters)</li>\n<li>Use high-quality images when possible</li>\n<li>Follow the recommended dimensions for each platform</li>\n</ul>\n<h2 id=\"using-meta-tags\">Using Meta Tags</h2>\n<p>Meta tags tell social platforms how to display your content. After generating your Open Graph assets, you’ll need to add these tags to the <code>&#x3C;head></code> section of your HTML:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> property</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"og:title\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"Your Title\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> property</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"og:description\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"Your Description\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> property</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"og:image\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"https://example.com/your-image.jpg\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> property</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"og:url\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"https://example.com/your-page\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> property</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"og:type\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"website\"</span><span style=\"color:#E1E4E8\"> /></span></span></code></pre>\n<p>For Twitter, you might also want to include Twitter Card tags:</p>\n<pre class=\"astro-code github-dark\" style=\"background-color:#24292e;color:#e1e4e8; overflow-x: auto;\" tabindex=\"0\" data-language=\"html\"><code><span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"twitter:card\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"summary_large_image\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"twitter:title\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"Your Title\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"twitter:description\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"Your Description\"</span><span style=\"color:#E1E4E8\"> /></span></span>\n<span class=\"line\"><span style=\"color:#E1E4E8\">&#x3C;</span><span style=\"color:#85E89D\">meta</span><span style=\"color:#B392F0\"> name</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"twitter:image\"</span><span style=\"color:#B392F0\"> content</span><span style=\"color:#E1E4E8\">=</span><span style=\"color:#9ECBFF\">\"https://example.com/your-image.jpg\"</span><span style=\"color:#E1E4E8\"> /></span></span></code></pre>",{headings:227,localImagePaths:238,remoteImagePaths:239,frontmatter:217,imagePaths:240},[228,229,232,235],{depth:24,slug:215,text:218},{depth:14,slug:230,text:231},"generating-open-graph-images","Generating Open Graph Images",{depth:59,slug:233,text:234},"best-practices","Best Practices:",{depth:14,slug:236,text:237},"using-meta-tags","Using Meta Tags",[],[],[],"getting-started.md"];

export { _astro_dataLayerContent as default };
